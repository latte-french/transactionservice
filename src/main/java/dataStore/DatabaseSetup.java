package dataStore;

import java.sql.*;

public class DatabaseSetup {

    private static Connection connection;
    private static Statement statement;
    static{
        try{
            connection = DriverManager.getConnection("jdbc:hsqldb:mem:transaction_service", "admin", "");
            statement = connection.createStatement();
        }
        catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }

    public static void initDatabase(){

        try {
            //Registering the HSQLDB JDBC driver
            Class.forName("org.hsqldb.jdbc.JDBCDriver");
        } catch (Exception e) {
            e.printStackTrace(System.out);
        }
        //Creating the connection with HSQLDB

        createUserTable();
        createAccountTable();
        createUserAccountTable();
        createTransferTable();

    }


    public static void createUserTable() {
        try {
            statement.execute("CREATE TABLE users (id BIGINT NOT NULL, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL,"+
                    " PRIMARY KEY (id))");
            connection.commit();
            statement.executeUpdate("INSERT INTO users VALUES (1,'Alex', 'Smith')");
            statement.executeUpdate("INSERT INTO users VALUES (2,'Clint', 'Eastwood')");
            statement.executeUpdate("INSERT INTO users VALUES (3,'Peter', 'Pan')");
            connection.commit();
        }
        catch (Exception e) {
            e.printStackTrace(System.out);
        }
     }

    public static void createAccountTable(){
        try {
            statement.execute("CREATE TABLE accounts (id BIGINT NOT NULL, balance DOUBLE NOT NULL, currency VARCHAR(3) NOT NULL,"+
                    " PRIMARY KEY (id))");
            connection.commit();
            statement.executeUpdate("INSERT INTO accounts VALUES (4000123412341234,23.56, 'RUB')");
            statement.executeUpdate("INSERT INTO accounts VALUES (4000123412341235,5.8, 'USD')");
            statement.executeUpdate("INSERT INTO accounts VALUES (4000123412341236,102.13, 'EUR')");
            connection.commit();
        }
        catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }

    public static void createUserAccountTable(){
        try {
            statement.execute("CREATE TABLE user_accounts (id BIGINT GENERATED BY DEFAULT AS IDENTITY"+
                    "(START WITH 1, INCREMENT BY 1) PRIMARY KEY," +
                            " user_id BIGINT NOT NULL, account_id BIGINT NOT NULL)");
            connection.commit();
            statement.executeUpdate("INSERT INTO user_accounts VALUES (null,1,4000123412341234)");
            statement.executeUpdate("INSERT INTO user_accounts VALUES (null,2,4000123412341235)");
            statement.executeUpdate("INSERT INTO user_accounts VALUES (null,2,4000123412341236)");
            connection.commit();
        }
        catch (Exception e) {
            e.printStackTrace(System.out);
        }
     }

    public static void createTransferTable(){
        try {
            statement.execute("CREATE TABLE transfers (id BIGINT GENERATED BY DEFAULT AS IDENTITY"+
                    "(START WITH 1, INCREMENT BY 1) PRIMARY KEY," +
                    " account_from BIGINT NOT NULL, sum_from FLOAT NOT NULL, currency_from VARCHAR(3) NOT NULL," +
                    "account_to BIGINT NOT NULL, sum_to FLOAT NOT NULL, currency_to VARCHAR(3) NOT NULL," +
                    "transferred_at TIMESTAMP)");
            connection.commit();
        }
        catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }
}
